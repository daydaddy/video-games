{"version":3,"sources":["components/UpdateVideoGame.js","components/VideoGame.js","components/CreateVideoGame.js","components/VideoGames.js","App.js","serviceWorker.js","index.js"],"names":["UpdateVideoGame","props","addConsole","newConsoles","state","consoles","map","x","push","setState","removeConsole","index","splice","handleConsoleChange","value","handleChange","target","console","log","type","checked","parseInt","name","handleSubmit","event","preventDefault","fetch","process","game","_id","method","headers","body","JSON","stringify","then","refresh","close","genre","release","players","owned","displayConsoles","this","key","onChange","className","onClick","onSubmit","placeholder","htmlFor","React","Component","VideoGame","useState","open","setOpen","toggleOpen","displayUpdate","CreatVideoGame","id","videoGames","getVideoGames","response","json","displayGames","CreateVideoGame","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6f9107c5.chunk.js","sourcesContent":["import React from 'react';\r\n// grabs the environment variable from for the api url from the process\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\nclass UpdateVideoGame extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const { game } = props;\r\n        // const game = props.games; // equal to above\r\n        this.state = {\r\n            name: game.name,\r\n            type: game.type,\r\n            genre: game.genre,\r\n            release: game.release,\r\n            players: game.players,\r\n            consoles: game.consoles,\r\n            owned: game.owned\r\n        }\r\n    }\r\n    addConsole = () => {\r\n        const newConsoles = this.state.consoles.map(x => x);\r\n        newConsoles.push(\"\");\r\n        this.setState({ consoles: newConsoles });\r\n    }\r\n    removeConsole = (index) => {\r\n        const newConsoles = this.state.consoles.map(x => x);\r\n        newConsoles.splice(index, 1);\r\n        this.setState({ consoles: newConsoles });\r\n    }\r\n    handleConsoleChange = (value, index) => {\r\n        const newConsoles = this.state.consoles.map(x => x);\r\n        newConsoles[index] = value;\r\n        this.setState({ consoles: newConsoles });\r\n    }\r\n    handleChange = ({ target }) => {\r\n        console.log(target.value);\r\n        let value = target.type === 'checkbox' ? target.checked : target.value;\r\n        value = target.type === 'number' ? parseInt(value) : value;\r\n        this.setState({ [target.name]: value });\r\n    }\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        fetch(`${API_URL}/video-games/${this.props.game._id}`, {\r\n            method: \"PUT\",\r\n            headers: {\r\n                \"Content-Type\" : \"application/json\"\r\n            },\r\n            body:JSON.stringify(this.state)\r\n        }).then(this.props.refresh)\r\n            .then(this.props.close)\r\n    }\r\n    render() {\r\n        const displayConsoles = this.state.consoles.map((console, index) => {\r\n            return (\r\n                <div key={index + 3000}>\r\n                    <select\r\n                        value={this.state.consoles[index]}\r\n                        onChange={({ target }) => this.handleConsoleChange(target.value, index)}\r\n                    >\r\n                        <option value=\"\">Choose a Console</option>\r\n                        <option value=\"ps1\">Playstation 1</option>\r\n                        <option value=\"ps2\">Playstation 2</option>\r\n                        <option value=\"ps3\">Playstation 3</option>\r\n                        <option value=\"ps4\">Playstation 4</option>\r\n                        <option value=\"xbox\">Xbox</option>\r\n                        <option value=\"xbox360\">Xbox 360</option>\r\n                        <option value=\"xbox1\">Xbox One</option>\r\n                        <option value=\"nes\">NES</option>\r\n                        <option value=\"snes\">SNES</option>\r\n                        <option value=\"n64\">Nintendo 64</option>\r\n                        <option value=\"gc\">GameCube</option>\r\n                        <option value=\"switch\">Switch</option>\r\n                        <option value=\"pc\">PC</option>\r\n                    </select>\r\n                    <input className=\"del-btn\"\r\n                        type=\"button\"\r\n                        value=\"X\"\r\n                        onClick={() => this.removeConsole(index)}\r\n                    />\r\n                </div>\r\n            )\r\n        })\r\n        return (\r\n            <form className=\"update\" onSubmit={this.handleSubmit}>\r\n                <input name=\"name\"\r\n                    type=\"text\"\r\n                    placeholder=\"Game Name\"\r\n                    value={this.state.name}\r\n                    onChange={this.handleChange}\r\n                />\r\n                <input name=\"type\"\r\n                    type=\"text\"\r\n                    placeholder=\"Game Type\"\r\n                    value={this.state.type}\r\n                    onChange={this.handleChange}\r\n                />\r\n                <input name=\"genre\"\r\n                    type=\"text\"\r\n                    placeholder=\"Game Genre\"\r\n                    value={this.state.genre}\r\n                    onChange={this.handleChange}\r\n                />\r\n                <div>\r\n                    <label htmlFor=\"release\">First Released</label>\r\n                    <input name=\"release\"\r\n                        type=\"date\"\r\n                        placeholder=\"Release Date\"\r\n                        value={this.state.release}\r\n                        onChange={this.handleChange}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label htmlFor=\"release\">Number of Players</label>\r\n                    <input name=\"players\"\r\n                        type=\"number\"\r\n                        placeholder=\"players\"\r\n                        value={this.state.players}\r\n                        onChange={this.handleChange}\r\n                    />\r\n                </div>\r\n                {displayConsoles}\r\n                <input type='button'\r\n                    value=\"Add Console\"\r\n                    onClick={this.addConsole}\r\n                />\r\n                <div>\r\n                    <label htmlFor=\"owned\">Owned</label>\r\n                    <input name=\"owned\"\r\n                        type=\"checkbox\"\r\n                        checked={this.state.owned}\r\n                        onChange={this.handleChange}\r\n                    />\r\n                </div>\r\n                <button>Update Game</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UpdateVideoGame;","import React, { useState } from 'react'\r\nimport UpdateVideoGame from './UpdateVideoGame';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\nconst VideoGame = ({game, refresh}) => {\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const deleteGame = () => {\r\n        fetch(`${API_URL}/video-games/${game._id}`, {\r\n            method:\"DELETE\"\r\n        }).then(refresh)      \r\n    }\r\n\r\n    const toggleOpen = () => setOpen(!open);\r\n    const displayUpdate = open ?\r\n        <fieldset>\r\n            <UpdateVideoGame game={game} refresh={refresh} close={toggleOpen} />\r\n        </fieldset> :\r\n        '';\r\n    return (\r\n        <div>\r\n            <span>\r\n                {game.name}</span>\r\n                <button className=\"edit\" onClick={toggleOpen}>Edit</button>\r\n                <button className=\"del-btn\" onClick={deleteGame}>X</button>\r\n                {displayUpdate}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VideoGame;","import React from 'react';\r\n// grabs the environment variable from for the api url from the process\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\nclass CreatVideoGame extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: \"\",\r\n            type: \"\",\r\n            genre: \"\",\r\n            release: \"\",\r\n            players: 0,\r\n            consoles: [\"\"],\r\n            owned: false\r\n        }\r\n    }\r\n    addConsole = () => {\r\n        const newConsoles = this.state.consoles.map(x => x);\r\n        newConsoles.push(\"\");\r\n        this.setState({ consoles: newConsoles });\r\n    }\r\n    removeConsole = (index) => {\r\n        const newConsoles = this.state.consoles.map(x => x);\r\n        newConsoles.splice(index, 1);\r\n        this.setState({ consoles: newConsoles });\r\n    }\r\n    handleConsoleChange = (value, index) => {\r\n        const newConsoles = this.state.consoles.map(x => x);\r\n        newConsoles[index] = value;\r\n        this.setState({ consoles: newConsoles });\r\n    }\r\n    handleChange = ({ target }) => {\r\n        console.log(target.value);\r\n        let value = target.type === 'checkbox' ? target.checked : target.value;\r\n        value = target.type === 'number' ? parseInt(value) : value;\r\n        this.setState({ [target.name]: value });\r\n    }\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        fetch(`${API_URL}/video-games`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\" : \"application/json\"\r\n            },\r\n            body:JSON.stringify(this.state)\r\n        }).then(this.props.refresh)\r\n            .then(() => this.setState({\r\n                name: \"\",\r\n                type: \"\",\r\n                genre: \"\",\r\n                release: \"\",\r\n                players: 0,\r\n                consoles: [\"\"],\r\n                owned: false\r\n            }))\r\n                \r\n    }\r\n    render() {\r\n        const displayConsoles = this.state.consoles.map((console, index) => {\r\n            return (\r\n                <div key={index + 3000}>\r\n                    <select\r\n                        value={this.state.consoles[index]}\r\n                        onChange={({ target }) => this.handleConsoleChange(target.value, index)}\r\n                    >\r\n                        <option value=\"\">Choose a Console</option>\r\n                        <option value=\"ps1\">Playstation 1</option>\r\n                        <option value=\"ps2\">Playstation 2</option>\r\n                        <option value=\"ps3\">Playstation 3</option>\r\n                        <option value=\"ps4\">Playstation 4</option>\r\n                        <option value=\"xbox\">Xbox</option>\r\n                        <option value=\"xbox360\">Xbox 360</option>\r\n                        <option value=\"xbox1\">Xbox One</option>\r\n                        <option value=\"nes\">NES</option>\r\n                        <option value=\"snes\">SNES</option>\r\n                        <option value=\"n64\">Nintendo 64</option>\r\n                        <option value=\"gc\">GameCube</option>\r\n                        <option value=\"switch\">Switch</option>\r\n                        <option value=\"pc\">PC</option>\r\n                    </select>\r\n                    <input className=\"del-btn\"\r\n                        type=\"button\"\r\n                        value=\"X\"\r\n                        onClick={() => this.removeConsole(index)}\r\n                    />\r\n                </div>\r\n            )\r\n        })\r\n        return (\r\n            <form id=\"create\" onSubmit={this.handleSubmit}>\r\n                <input name=\"name\"\r\n                    type=\"text\"\r\n                    placeholder=\"Game Name\"\r\n                    value={this.state.name}\r\n                    onChange={this.handleChange}\r\n                />\r\n                <input name=\"type\"\r\n                    type=\"text\"\r\n                    placeholder=\"Game Type\"\r\n                    value={this.state.type}\r\n                    onChange={this.handleChange}\r\n                />\r\n                <input name=\"genre\"\r\n                    type=\"text\"\r\n                    placeholder=\"Game Genre\"\r\n                    value={this.state.genre}\r\n                    onChange={this.handleChange}\r\n                />\r\n                <div>\r\n                    <label htmlFor=\"release\">First Released</label>\r\n                    <input name=\"release\"\r\n                        type=\"date\"\r\n                        placeholder=\"Release Date\"\r\n                        value={this.state.release}\r\n                        onChange={this.handleChange}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label htmlFor=\"release\">Number of Players</label>\r\n                    <input name=\"players\"\r\n                        type=\"number\"\r\n                        placeholder=\"players\"\r\n                        value={this.state.players}\r\n                        onChange={this.handleChange}\r\n                    />\r\n                </div>\r\n                {displayConsoles}\r\n                <input type='button'\r\n                    value=\"Add Console\"\r\n                    onClick={this.addConsole}\r\n                />\r\n                <div>\r\n                    <label htmlFor=\"owned\">Owned</label>\r\n                    <input name=\"owned\"\r\n                        type=\"checkbox\"\r\n                        checked={this.state.owned}\r\n                        onChange={this.handleChange}\r\n                    />\r\n                </div>\r\n                <button>Add Game</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CreatVideoGame;","import React, { Component } from 'react'\r\nimport VideoGame from './VideoGame';\r\nimport CreateVideoGame from './CreateVideoGame';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\nexport default class extends Component {\r\n    state = {\r\n        videoGames: []\r\n    }\r\n    getVideoGames = () => {\r\n\r\n        fetch(`${API_URL}/video-games`)\r\n            .then(response => response.json())\r\n            .then(videoGames => this.setState({ videoGames }))\r\n    }\r\n    componentDidMount() {\r\n        this.getVideoGames();\r\n    }\r\n    render() {\r\n        const displayGames = this.state.videoGames.map(game =>\r\n            <VideoGame game={game} key={game._id} refresh={this.getVideoGames}/>)\r\n        return (\r\n            <div>\r\n                <h1>Video Games</h1>\r\n                <CreateVideoGame refresh={this.getVideoGames}/>\r\n                {displayGames}\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport VideoGames from './components/VideoGames'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <VideoGames/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}